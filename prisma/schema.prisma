generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

// ---------- AUTH MODELS ----------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(STUDENT)

  instituteId   String?
  studentId     String?

  phone         String?
  department    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  institute     Institute?     @relation(fields: [instituteId], references: [id])
  studentProfile StudentProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- CORE MODELS ----------
model Institute {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  adminId   String   @unique
  address   String?
  phone     String?
  website   String?
  config    InstituteConfig?
  users     User[]
  students  StudentProfile[]
  attendances Attendance[]
  assessments Assessment[]
  activities  Activity[]
  fees        Fee[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstituteConfig {
  id               String    @id @default(cuid())
  instituteId      String    @unique
  attendanceCutoff Int       @default(75)
  ia1Cutoff        Int       @default(40)
  ia2Cutoff        Int       @default(40)
  midSemCutoff     Int       @default(40)
  finalSemCutoff   Int       @default(40)
  emailNotifications Boolean @default(true)
  whatsappNotifications Boolean @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  institute        Institute @relation(fields: [instituteId], references: [id])
}

// Excel #1: students.xlsx
model StudentProfile {
  id                    String   @id @default(cuid())
  instituteId           String
  student_id            String   // e.g., SID23001
  course                String?
  department            String?
  admission_year        Int?
  entry_exam_percentile Float?
  first_generation_learner Boolean?
  current_semester      Int?
  phone                 String?
  parentPhone           String?
  address               String?

  user          User?     @relation(fields: [userId], references: [id])
  userId        String?   @unique
  institute     Institute @relation(fields: [instituteId], references: [id])
  attendances   Attendance[]
  assessments   Assessment[]
  activities    Activity[]
  fees          Fee[]
  predictions   DropoutPrediction[]
  interventions InterventionLog[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([instituteId, student_id])
}

// Excel #2: attendance.xlsx
model Attendance {
  id            String   @id @default(cuid())
  instituteId   String
  studentId     String
  date          DateTime
  is_present    Boolean
  subject_code  String?
  subject_name  String?
  total_classes Int?
  attended_classes Int?
  
  student       StudentProfile @relation(fields: [studentId], references: [id])
  institute     Institute      @relation(fields: [instituteId], references: [id])

  @@unique([studentId, date, subject_code])
}

// Excel #3: assessments.xlsx
model Assessment {
  id              String   @id @default(cuid())
  instituteId     String
  studentId       String
  assessment_name String
  assessment_type String?
  subject_code    String?
  subject_name    String?
  due_date        DateTime?
  submission_date DateTime?
  max_score       Float
  score_obtained  Float
  date            DateTime @default(now())
  
  student         StudentProfile @relation(fields: [studentId], references: [id])
  institute       Institute      @relation(fields: [instituteId], references: [id])

  @@index([studentId, assessment_name])
}

// Excel #4: activities.xlsx
model Activity {
  id            String   @id @default(cuid())
  instituteId   String
  studentId     String
  date          DateTime
  activity_type String
  activity_name String?
  duration      Int?
  points        Int?
  
  student       StudentProfile @relation(fields: [studentId], references: [id])
  institute     Institute      @relation(fields: [instituteId], references: [id])

  @@index([studentId, activity_type])
}

// Excel #5: fees.xlsx
model Fee {
  id             String   @id @default(cuid())
  instituteId    String
  studentId      String
  fee_type       String
  due_date       DateTime
  amount_due     Float
  amount_paid    Float    @default(0)
  payment_date   DateTime?
  payment_method String?
  reminders_sent Int      @default(0)
  status         String   @default("PENDING")
  
  student        StudentProfile @relation(fields: [studentId], references: [id])
  institute      Institute      @relation(fields: [instituteId], references: [id])

  @@index([studentId, status])
}

// ---------- AI MODELS ----------
model DropoutPrediction {
  id                   String   @id @default(cuid())
  studentId            String
  prediction_date      DateTime
  risk_score           Float
  risk_level           String
  confidence           Float
  contributing_factors Json
  recommendations      Json?
  model_version        String?

  student              StudentProfile @relation(fields: [studentId], references: [id])

  @@unique([studentId, prediction_date], name: "studentId_prediction_date")
}



model InterventionLog {
  id            String   @id @default(cuid())
  studentId     String
  action_type   String   // e.g., "Counselling", "Fee Reminder"
  description   String?
  assigned_to   String?  // mentor/teacher ID
  status        String   @default("PENDING")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  student       StudentProfile @relation(fields: [studentId], references: [id])
}

model PredictionAudit {
  id           String   @id @default(cuid())
  model_version String
  trained_at   DateTime @default(now())
  features_used Json
  accuracy     Float?
  notes        String?
}

// ---------- Notifications ----------
model Notification {
  id          String   @id @default(cuid())
  studentId   String
  type        String   // EMAIL, WHATSAPP, SMS
  content     String
  sent_at     DateTime @default(now())
  status      String   // SENT, FAILED, PENDING
  recipient   String

  @@index([studentId, sent_at])
}